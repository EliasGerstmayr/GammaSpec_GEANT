%variable = linspace(0, 1, 20);
% energy of particles in MeV
variable = 50:5:200;
% theta in vertical direction (polarisation)
% in mrad
theta_range = 0:1:20;
% Based on the input decks runGamma
executecommand = strings(length(variable)*length(theta_range),1);
j = 0;
for n = 1:length(variable)
    for i = 1:length(theta_range)
        j = j+1;
        var = variable(n);
        theta = theta_range(i);
        macfname = ['/Users/eg415/GEANT/QED/scripts_theta/Gamma_' num2str(var, '%03d') 'MeV_' num2str(theta,'%02d') 'mrad.mac'];
        outputfname = ['Gamma_' num2str(var, '%03d') 'MeV_' num2str(theta, '%02d') 'mrad'];

        inputdeck= ['/run/numberOfThreads 1' char(10),...
                    '/run/initialize' char(10), ...
                    '/vis/open HepRepFile' char(10), ...
                    '/vis/drawVolume' char(10), ...
                    '/vis/scene/add/trajectories smooth' char(10), ...
                    '/vis/scene/endOfEventAction accumulate 10' char(10), ...
                    '/gps/particle gamma' char(10), ...
                    '/gps/pos/centre 0 0 42.5 cm' char(10), ...
                    '/gps/ang/type beam1d' char(10), ...
                    '/gps/ang/sigma_r 0.02 deg' char(10), ...
                    '/gps/pos/type Beam' char(10), ...
                    '/gps/pos/shape Circle' char(10), ...
                    '/gps/pos/sigma_r 0.425 um' char(10), ...
                    '/gps/direction 0. ' num2str(sin(theta/1000),'%d') ' ' num2str(-cos(theta/1000),'%d') char(10),...
                    '/gps/ene/type Lin' char(10), ...
                    '/gps/ene/min ' num2str(var) ' MeV' char(10), ...
                    '/gps/ene/max ' num2str(var) ' MeV' char(10), ...
                    '/gps/ene/gradient 0' char(10), ...
                    '/gps/ene/intercept 1' char(10), ...
                    '/B1/histo/setOutputFile ' outputfname char(10), ...
                    '/run/beamOn 10000' char(10),...
                    '/vis/viewer/flush'];

        fid = fopen(macfname, 'w');
        fprintf(fid, inputdeck);
        fclose(fid);
        
        
        executecommand{j} =  ['./QED ' macfname ';'];
    end
    %executecommand = [executecommand './QED ' macfname '; python root2mat.py ./data/' outputfname '.root; '];
    %executecommand = [executecommand,...
    %    './QED ' macfname ';'];
end

executecommand_file = 'buffer.txt';
fid = fopen(executecommand_file, 'w');
fprintf(fid,'%s\n', executecommand);
fclose(fid);
%clipboard('copy',executecommand)
